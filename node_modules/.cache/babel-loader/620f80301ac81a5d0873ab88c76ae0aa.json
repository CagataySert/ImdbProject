{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime-corejs2/helpers/esm/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _applyDecoratedDescriptor from \"@babel/runtime-corejs2/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime-corejs2/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _temp;\n\nimport { action, observable, Mobx } from 'mobx';\nimport { useStaticRendering } from 'mobx-react';\nimport fetch from 'isomorphic-unfetch';\nimport { API_BASE } from '../constants/constants.js';\nimport { configure } from \"mobx\";\nvar isServer = typeof window === 'undefined';\nuseStaticRendering(isServer);\nvar Store = (_class = (_temp = function Store() {\n  var initialData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  _classCallCheck(this, Store);\n\n  _initializerDefineProperty(this, \"films\", _descriptor, this);\n\n  _initializerDefineProperty(this, \"searchFilm\", _descriptor2, this);\n\n  console.log('zaza', initialData);\n  this.films = initialData;\n  console.log('ikinci cstr', this.films);\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"films\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return {};\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"searchFilm\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    var _this = this;\n\n    return (\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(title, year, type) {\n          var response, _ref2, Search;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return fetch(\"\".concat(API_BASE, \"&s=\").concat(title, \"&y=\").concat(year, \"&type=\").concat(type));\n\n                case 2:\n                  response = _context.sent;\n                  _context.next = 5;\n                  return response.json();\n\n                case 5:\n                  _ref2 = _context.sent;\n                  Search = _ref2.Search;\n                  _this.films = Search;\n                  console.log('Data : ', Search);\n                  console.log('thisfilms', Mobx.toJS(_this.films));\n\n                case 10:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x, _x2, _x3) {\n          return _ref.apply(this, arguments);\n        };\n      }()\n    );\n  }\n})), _class);\nvar store = null;\nexport function initializeStore(initialData) {\n  console.log('init', initialData, isServer, store);\n\n  if (isServer) {\n    return new Store(initialData);\n  }\n\n  if (store === null) {\n    store = new Store(initialData);\n  }\n\n  return store;\n}","map":{"version":3,"sources":["C:\\Users\\cagat\\OneDrive\\Desktop\\Imdb\\stores\\store.js"],"names":["action","observable","Mobx","useStaticRendering","fetch","API_BASE","configure","isServer","window","Store","initialData","console","log","films","title","year","type","response","json","Search","toJS","store","initializeStore"],"mappings":";;;;;;;;;AAAA,SAASA,MAAT,EAAiBC,UAAjB,EAA6BC,IAA7B,QAAyC,MAAzC;AACA,SAASC,kBAAT,QAAmC,YAAnC;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,QAAT,QAAyB,2BAAzB;AACA,SAASC,SAAT,QAA0B,MAA1B;AAGA,IAAMC,QAAQ,GAAG,OAAOC,MAAP,KAAkB,WAAnC;AACAL,kBAAkB,CAACI,QAAD,CAAlB;IAEME,K,sBAGF,iBAA8B;AAAA,MAAlBC,WAAkB,uEAAJ,EAAI;;AAAA;;AAAA;;AAAA;;AAC1BC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,WAApB;AACA,OAAKG,KAAL,GAAaH,WAAb;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B,KAAKC,KAAhC;AAEH,C,+EAPAZ,U;;;;;WAAmB,E;;8EASnBD,M;;;;;;;;;;;;iCAAoB,iBAAOc,KAAP,EAAcC,IAAd,EAAoBC,IAApB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACMZ,KAAK,WAAIC,QAAJ,gBAAkBS,KAAlB,gBAA6BC,IAA7B,mBAA0CC,IAA1C,EADX;;AAAA;AACXC,kBAAAA,QADW;AAAA;AAAA,yBAEQA,QAAQ,CAACC,IAAT,EAFR;;AAAA;AAAA;AAETC,kBAAAA,MAFS,SAETA,MAFS;AAGjB,kBAAA,KAAI,CAACN,KAAL,GAAaM,MAAb;AACAR,kBAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBO,MAAvB;AACAR,kBAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBV,IAAI,CAACkB,IAAL,CAAU,KAAI,CAACP,KAAf,CAAzB;;AALiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,S;;;;;;;;;AASzB,IAAIQ,KAAK,GAAG,IAAZ;AAEA,OAAO,SAASC,eAAT,CAAyBZ,WAAzB,EAAsC;AACzCC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,WAApB,EAAiCH,QAAjC,EAA2Cc,KAA3C;;AACA,MAAId,QAAJ,EAAc;AACV,WAAO,IAAIE,KAAJ,CAAUC,WAAV,CAAP;AACH;;AACD,MAAIW,KAAK,KAAK,IAAd,EAAoB;AAChBA,IAAAA,KAAK,GAAG,IAAIZ,KAAJ,CAAUC,WAAV,CAAR;AACH;;AACD,SAAOW,KAAP;AACH","sourcesContent":["import { action, observable, Mobx } from 'mobx'\r\nimport { useStaticRendering } from 'mobx-react'\r\nimport fetch from 'isomorphic-unfetch'\r\nimport { API_BASE } from '../constants/constants.js';\r\nimport { configure } from \"mobx\";\r\n\r\n\r\nconst isServer = typeof window === 'undefined'\r\nuseStaticRendering(isServer)\r\n\r\nclass Store {\r\n    @observable films = {};\r\n\r\n    constructor(initialData = {}) {\r\n        console.log('zaza', initialData);\r\n        this.films = initialData;\r\n        console.log('ikinci cstr', this.films);\r\n\r\n    }\r\n\r\n    @action searchFilm = async (title, year, type) => {\r\n        const response = await fetch(`${API_BASE}&s=${title}&y=${year}&type=${type}`);\r\n        const { Search } = await response.json();\r\n        this.films = Search;\r\n        console.log('Data : ', Search);\r\n        console.log('thisfilms', Mobx.toJS(this.films))\r\n    }\r\n}\r\n\r\nlet store = null\r\n\r\nexport function initializeStore(initialData) {\r\n    console.log('init', initialData, isServer, store);\r\n    if (isServer) {\r\n        return new Store(initialData)\r\n    }\r\n    if (store === null) {\r\n        store = new Store(initialData)\r\n    }\r\n    return store\r\n}"]},"metadata":{},"sourceType":"module"}